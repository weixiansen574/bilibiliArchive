package top.weixiansen574.bilibiliArchive.http;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;

//Generated by ChatGPT
public class HttpLogger {
    private static final long MAX_LOG_FILE_SIZE = 10 * 1024 * 1024; // 10 MB
    private static final int MAX_LOG_FILES = 20;
    private static final String LOG_FILE_EXTENSION = ".log";

    private final File logDirectory;
    private PrintWriter logWriter;
    private long currentLogSize;

    public HttpLogger(File logDirectory) {
        this.logDirectory = logDirectory;
        this.currentLogSize = 0;
        if (!logDirectory.exists()){
            logDirectory.mkdirs();
        }
        createNewLogFile();
    }

    private void createNewLogFile() {
        closeLogFile();

        // Create a new log file with the current timestamp
        String fileName = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date()) + LOG_FILE_EXTENSION;
        File logFile = new File(logDirectory, fileName);

        try {
            logFile.createNewFile();
            logWriter = new PrintWriter(new FileWriter(logFile, true));
            currentLogSize = logFile.length();
        } catch (IOException e) {
            e.printStackTrace();
        }

        deleteOldLogFiles();
    }

    private void closeLogFile() {
        if (logWriter != null) {
            logWriter.close();
            logWriter = null;
        }
    }

    private void deleteOldLogFiles() {
        File[] logFiles = logDirectory.listFiles((dir, name) -> name.endsWith(LOG_FILE_EXTENSION));
        if (logFiles == null) return;

        // Sort log files based on their last modified timestamp in ascending order
        // (oldest log files first)
        Arrays.sort(logFiles, Comparator.comparingLong(File::lastModified));

        int numFilesToDelete = logFiles.length - MAX_LOG_FILES;
        if (numFilesToDelete > 0) {
            for (int i = 0; i < numFilesToDelete; i++) {
                logFiles[i].delete();
            }
        }
    }

    public synchronized void log(String message) {
        if (logWriter == null) return;

        logWriter.println(message);
        logWriter.flush();

        currentLogSize += message.getBytes().length;

        // Check if the log file exceeds the maximum size
        if (currentLogSize > MAX_LOG_FILE_SIZE) {
            createNewLogFile();
        }
    }

    public synchronized void close() {
        closeLogFile();
    }
}


